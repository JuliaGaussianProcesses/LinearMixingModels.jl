var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = LinearMixingModels","category":"page"},{"location":"#LinearMixingModels","page":"Home","title":"LinearMixingModels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for LinearMixingModels.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [LinearMixingModels]","category":"page"},{"location":"#LinearMixingModels.isotopic_inputs","page":"Home","title":"LinearMixingModels.isotopic_inputs","text":"A constant to represent all isotopic input types.\n\n\n\n\n\n","category":"type"},{"location":"#LinearMixingModels.ILMM","page":"Home","title":"LinearMixingModels.ILMM","text":"ILMM(fs, H, D)\n\nAn Instantaneous Linear Mixing Model (ILMM) – a distribution over vector- valued functions. Let p be the number of observed outputs, and m the number of latent processes, then\n\nArguments:\n\nfs: a length-m vector of Gaussian process objects from AbstractGPs.jl.\nH: a p x m matrix representing a fixed basis of our p-dim target: h1,...,hm\nD: an m x m Diagonal matrix, variance of noise on each latent process. Positive entries.\n\n\n\n\n\n","category":"type"},{"location":"#LinearMixingModels.IndependentMOGP","page":"Home","title":"LinearMixingModels.IndependentMOGP","text":"IndependentMOGP\n\n\n\n\n\n","category":"type"},{"location":"#LinearMixingModels.OILMM","page":"Home","title":"LinearMixingModels.OILMM","text":"OILMM(fs, H, D)\n\nAn Orthogonal Instantaneous Linear Mixing Model (OILMM) – a distribution over vector- valued functions. Let p be the number of observed outputs, and m the number of latent processes, then\n\nArguments:\n\nfs: a length-m vector of Gaussian process objects as an IndependentMOGP.\nH: a p x m orthogonal matrix representing a fixed basis of our p-dim target: h1,...,hm\nD: an m x m Diagonal matrix, variance of noise on each latent process. Positive entries.\n\n\n\n\n\n","category":"type"},{"location":"#Base.rand-Tuple{Random.AbstractRNG, AbstractGPs.FiniteGP{var\"#s4\", Tx, TΣ} where {var\"#s4\"<:ILMM, Tx<:(AbstractVector{T} where T), TΣ}}","page":"Home","title":"Base.rand","text":"rand(rng::AbstractRNG, fx::FiniteGP{<:ILMM})\n\nSample from the ILMM, including the observation noise. Follows generative structure of model 2 from [1]. Follows the AbstractGPs.jl API. See also rand_latent. [1] - Bruinsma et al 2020.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.denoised_marginals-Tuple{AbstractGPs.FiniteGP{var\"#s3\", Tx, TΣ} where {var\"#s3\"<:(OILMM{var\"#s8\", var\"#s4\"} where {var\"#s8\"<:IndependentMOGP, var\"#s4\"<:Orthogonal}), Tx<:(AbstractVector{T} where T), TΣ}}","page":"Home","title":"LinearMixingModels.denoised_marginals","text":"denoised_marginals(fx::FiniteGP{<:OILMM})\n\nReturns the marginal distribution over the OILMM without the IID noise components. See also marginals.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.denoised_marginals-Tuple{AbstractGPs.FiniteGP{var\"#s3\", Tx, TΣ} where {var\"#s3\"<:ILMM, Tx<:(AbstractVector{T} where T), TΣ}}","page":"Home","title":"LinearMixingModels.denoised_marginals","text":"denoised_marginals(fx::FiniteGP{<:OILMM})\n\nReturns the marginal distribution over the OILMM without the IID noise components. See also marginals.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.finite_gps-Tuple{AbstractGPs.FiniteGP{var\"#s2\", var\"#s1\", TΣ} where {var\"#s2\"<:IndependentMOGP, var\"#s1\"<:Union{KernelFunctions.MOInputIsotopicByFeatures, KernelFunctions.MOInputIsotopicByOutputs}, TΣ}, AbstractVector{T} where T}","page":"Home","title":"LinearMixingModels.finite_gps","text":"finite_gps()\n\nReturns a list of of the finite GPs for all latent processes for some input x.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.finite_gps-Tuple{AbstractGPs.FiniteGP{var\"#s2\", var\"#s1\", TΣ} where {var\"#s2\"<:IndependentMOGP, var\"#s1\"<:Union{KernelFunctions.MOInputIsotopicByFeatures, KernelFunctions.MOInputIsotopicByOutputs}, TΣ}}","page":"Home","title":"LinearMixingModels.finite_gps","text":"finite_gps()\n\nReturns a list of of the finite GPs for all latent processes, given isotopic inputs.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.independent_mogp-Tuple{Vector{var\"#s3\"} where var\"#s3\"<:AbstractGPs.AbstractGP}","page":"Home","title":"LinearMixingModels.independent_mogp","text":"independent_mogp\n\nReturns an IndependentMOGP given a list of AbstractGPs.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.rand_latent-Tuple{Random.AbstractRNG, AbstractGPs.FiniteGP{var\"#s3\", Tx, TΣ} where {var\"#s3\"<:(OILMM{var\"#s8\", var\"#s4\"} where {var\"#s8\"<:IndependentMOGP, var\"#s4\"<:Orthogonal}), Tx<:(AbstractVector{T} where T), TΣ}}","page":"Home","title":"LinearMixingModels.rand_latent","text":"rand_latent(rng::AbstractRNG, fx::FiniteGP{<:OILMM})\n\nSample from the latent (noiseless) process. See also rand.\n\n\n\n\n\n","category":"method"},{"location":"#LinearMixingModels.rand_latent-Tuple{Random.AbstractRNG, AbstractGPs.FiniteGP{var\"#s3\", Tx, TΣ} where {var\"#s3\"<:ILMM, Tx<:(AbstractVector{T} where T), TΣ}}","page":"Home","title":"LinearMixingModels.rand_latent","text":"rand_latent(rng::AbstractRNG, fx::FiniteGP{<:ILMM})\n\nSample from the latent (noiseless) process. See also rand.\n\n\n\n\n\n","category":"method"}]
}
